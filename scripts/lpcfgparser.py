##################################################################################################################################
### The Rainbow Parser, by Shashi Narayan and Shay Cohen (University of Edinburgh)
###
###
### This script is used to parse with grammar files generated by the training algorithms in the train/ directory.
### Its main driver is the lpcfgparser binary in the decode/src directory.
### Usage: python lpcfgparser.py [sentence-file] [grammar-file] [prune-grammar] [vocab-file] [vocab-threshold] [prune-threshold]
### See README.md file for more information
###
##################################################################################################################################


import os
import sys

def convertFileToTrees(sentenceFile, outputFile, root, POS):

	with open(sentenceFile, "r") as f:
		with open(outputFile, "w") as g:
			for sent in f:
				sent = sent.rstrip()
				words = sent.split(" ")

				print >> g, "("+root,

				for w in words:
					print >> g, "("+POS+" "+w+")",

				print >> g, ")"


def createExecutionFile(inputTreebank, inputPruneGrammar, inputGrammar, vocabFile, vocabThreshold, pruneThreshold, outputCommandFile):

	with open(outputCommandFile, "w") as f:
		print >> f, "command string lpcfgparse"
		print >> f, "grammar string", inputGrammar
		print >> f, "pruneGrammar string", inputPruneGrammar
		print >> f, "vocabFile string", vocabFile
		print >> f, "vocabThreshold int", vocabThreshold
		print >> f, "pruneThreshold double",pruneThreshold
		print >> f, "enforcePreterminals bool false"
		print >> f, "printChart bool false"
		print >> f, "treebankInput string", inputTreebank


def chooseRootAndPOS(inputGrammar):

	root = "S"
	POS = "X"

	foundRoot = 0
	foundPOS = 0

	with open(inputGrammar, "r") as f:
		for directive in f:
			commands = directive.split(" ")

			if (commands[0] == "interminals"):
				root = commands[1]
				foundRoot = 1

			if (commands[0] == "preterminals"):
				POS = commands[1]
				foundPOS = 1

		if (foundRoot == 1) and (foundPOS == 1):
			return [root, POS]

	return [root, POS]


def checkCompiled():
	dir = os.path.dirname(os.path.realpath(__file__))

	myExec = dir + '/../decode/src/lpcfgparser'

	if not os.path.isfile(myExec):
		sys.exit("Cannot find the executable "+myExec+". Did you compile the parser? See README.md.")
	else:
		print >> sys.stderr, "Found parser binary in " + myExec
	

	return myExec;



if (len(sys.argv) < 6):
	sys.exit("usage: python lpcfgparser.py [sentence-file] [grammar-file] [prune-grammar] [vocab-file] [vocab-threshold] [prune-threshold]")

inputFile = sys.argv[1]
grammarFile = sys.argv[2]
pruneGrammarFile = sys.argv[3]
vocabFile = sys.argv[4]
vocabThreshold = sys.argv[5]

if not os.path.isfile(inputFile):
	sys.exit("Cannot find file "+inputFile)

if not os.path.isfile(grammarFile):
	sys.exit("Cannot find file " + grammarFile)

if not os.path.isfile(pruneGrammarFile):
	sys.exit("Cannot find file " + pruneGrammarFile)

if not os.path.isfile(vocabFile):
	sys.exit("Cannot find file " +vocabFile)

if (len(sys.argv) < 7):
	pruneThreshold = 1e-4
else:
	pruneThreshold = sys.argv[6]

try:
	vocabThreshold = int(vocabThreshold)
except ValueError:
	sys.exit("vocab-threshold should be an integer")

try:
	pruneThreshold = float(pruneThreshold)
except ValueError:
	sys.exit( "prune-threshold should be a float number")




myExec = checkCompiled()

[r,p] = chooseRootAndPOS(pruneGrammarFile)

convertFileToTrees(inputFile, inputFile+".tmp", r, p)

createExecutionFile(inputFile+".tmp", pruneGrammarFile, grammarFile, vocabFile, vocabThreshold, pruneThreshold, inputFile+".cmd")

os.system(myExec+" "+inputFile+".cmd")

print >> sys.stderr, "lpcfgparser.py says: I should have left a trace of my execution:"
print >> sys.stderr, "1. The file "+inputFile+".tmp"+" which is the treebank style fed into the lpcfgparser binary as input"
print >> sys.stderr, "2. The file "+inputFile+".cmd"+" which is the command file fed into the lpcfgparser binary as input"
print >> sys.stderr, "Note that I parse a file into standard output. If you want to grab the parses, redirect my output to a file"

